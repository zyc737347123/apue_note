/* 
 * CS 241
 * The University of Illinois
 */

#include <stdio.h>
#include <stdlib.h>
#include <sys/select.h>
#include <pthread.h>
#include <string.h>
#include <assert.h>
#include <unistd.h>
#include <sys/wait.h>
#include <poll.h>

#include "libmapreduce.h"
#include "libdictionary.h"

static const int BUFFER_SIZE = 2048;


static void process_key_value(const char *key, const char *value, mapreduce_t *mr)
{
	int res;
	char *old_value = (char *)dictionary_get(&mr->dic, key);
	char *new_value;
	char *temp_value = (char *)value;
	if(old_value  == NULL) {
		if ((res = dictionary_add(&mr->dic, key, value)) != 0){
			//assert(res==0);
			 fprintf(stderr, "error in adding new key.\n");
		}
	}
	else{
		new_value = mr->reduce(old_value, temp_value);
		dictionary_remove_free(&mr->dic, key);
		free((char *) value);
		dictionary_add(&mr->dic, key, new_value);
	}
}


static int read_from_fd(int fd, char *buffer, mapreduce_t *mr)
{
	/* Find the end of the string. */
	int offset = strlen(buffer);

	/* Read bytes from the underlying stream. */
	int bytes_read = read(fd, buffer + offset, BUFFER_SIZE - offset);
	if (bytes_read == 0){
		return 0;
	}
	if(bytes_read < 0){
		fprintf(stderr, "error in read.\n");
		return -1;
	}
	buffer[offset + bytes_read] = '\0';

	/* Loop through each "key: value\n" line from the fd. */
	char *line;
	while ((line = strstr(buffer, "\n")) != NULL)
	{
		*line = '\0';

		/* Find the key/value split. */
		char *split = strstr(buffer, ": ");
		if (split == NULL)
			continue;

		//assert(split != NULL);

		/* Allocate and assign memory */
		char *key = malloc((split - buffer + 1) * sizeof(char));
		char *value = malloc((strlen(split) - 2 + 1) * sizeof(char));

		strncpy(key, buffer, split - buffer);
		key[split - buffer] = '\0';

		strcpy(value, split + 2);

		/* Process the key/value. */
		process_key_value(key, value, mr);

		/* Shift the contents of the buffer to remove the space used by the processed line. */
		memmove(buffer, line + 1, BUFFER_SIZE - ((line + 1) - buffer));
		buffer[BUFFER_SIZE - ((line + 1) - buffer)] = '\0';
	}

	return 1;
}

int find_max(int * arr, int count)
{
	int i;
	int res = 0;
	for (i = 0; i < count; i++){
		if(arr[i*2] > res){
			res = arr[i*2];
		}
	}
	return res;
}

void worker_main(void * para)
{
// 	printf("test3_6\n");
	mapreduce_t *mr = (mapreduce_t *)para;
	int i,res;
	int num_sets = mr->numSets;
	char **buf;
	int max_fd = 0;
	fd_set fdSet;
	//create buffers for each process
	buf = (char **) malloc(sizeof(char *) * num_sets);
	for (i = 0; i < num_sets; i++){
		buf[i] = malloc(sizeof(char) * (BUFFER_SIZE+1));
		buf[i][0] = '\0';
	}	
// printf("test3_7\n");
	FD_ZERO(&fdSet);
	for (i = 0; i < num_sets; i++){
		FD_SET(mr->fds[i*2], &fdSet);
	}	
	max_fd = find_max(mr->fds, num_sets);                //Find the max fd
// printf("test3_8\n");


//printf("Hi, num is %d\n", mr->numSets);
	while (num_sets > 0){
		fd_set temp = fdSet;
		if( (res = select(max_fd+1, &temp, NULL, NULL, NULL)) == -1){		
			fprintf(stderr, "error in select.\n");
			exit(-1);
		}
		else if (res == 0){
			break;
		}
		else {                                       //res == 1
			for (i = 0; i < mr->numSets; i++)
			{
				if(FD_ISSET(mr->fds[i*2], &temp)){
					if(read_from_fd(mr->fds[i*2], buf[i], mr) == 0){
						FD_CLR(mr->fds[i*2], &fdSet);
						num_sets--;
//printf("test3_9\n");
					}
				}
			}
		}
	}


//printf("test3_10\n");
	//TODO	free the mem
	for (i = 0; i<mr->numSets; i++){
		free(buf[i]);
	}
	free(buf);

	return ;
}


void mapreduce_init(mapreduce_t *mr, 
			void (*mymap)(int, const char *), 
				const char *(*myreduce)(const char *, const char *))
{
	dictionary_init(&mr->dic);
	mr->map = mymap;
	mr->reduce = myreduce;
}

void mapreduce_map_all(mapreduce_t *mr, const char **values)
{
	int i;
	int num_sets = 0;                                     //number of data sets
	pid_t pid;
	int *fds;
	while(1){
		if (values[num_sets] == NULL)
			break;
		num_sets++;
	}

	mr->numSets = num_sets;
	//printf("num is %d\n", mr->numSets);

	fds = (int *)malloc(2 * num_sets * sizeof(int));      //TODO use stack mem?
	mr->fds = fds;

	for (i = 0; i<num_sets; i++) {
		pipe(&fds[2 * i]);            
		pid = fork();
		if (pid == -1) {
			fprintf(stderr, "error in fork().\n");
		}
		else if (pid == 0){                           //child process
			mr->map(fds[2*i + 1], values[i]);
			exit(0);
		}
		else {                                        //parent process TODO
			close(fds[2*i + 1]); 
		}
	}

	pthread_create(&mr->worker_thread, NULL, worker_main, mr); //what if change it to the beginning?
}

void mapreduce_reduce_all(mapreduce_t *mr)
{
	pthread_join(mr->worker_thread, NULL);

}

const char *mapreduce_get_value(mapreduce_t *mr, const char *result_key)
{
	return dictionary_get(&mr->dic, result_key);
}

void mapreduce_destroy(mapreduce_t *mr)
{
	int i;
	for (i = 0; i<mr->numSets; i++){
		close(mr->fds[i * 2]);
	}	
	free(mr->fds);
	dictionary_destroy_free(&mr->dic);
}

